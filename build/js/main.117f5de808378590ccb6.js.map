{"version":3,"sources":["webpack:///./src/style/style.scss","webpack:///./src/utility/function.ts","webpack:///./src/components/filmCard/style.scss","webpack:///./src/utility/class.ts","webpack:///./src/components/filmCard/index.jsx","webpack:///./src/App.jsx","webpack:///./src/index.jsx"],"names":["module","exports","normalizeFilmArray","roleForActor","filmForActorViewModelArray","Array","cast","forEach","c","filmForActorViewModel","FilmForActorViewModel","populate","actorViewModel","ActorViewModel","populateFromCast","name","actor","push","mergeFilm","filmFromActor1","filmFromActor2","console","log","filmsForFirstActor","filmsForSecondActor","filmsInCommon","film","filmForSecondActor","find","f","id","secondary_actor","Cast","Crew","RoleForActor","this","character","job","department","populateFromCrew","crew","media_type","poster_path","backdrop_path","popularity","title","original_language","release_date","overview","original_title","className","aria-hidden","FilmCard","props","first_actor","first_actor_role","role","filter","x","map","join","secondary_actor_role","styles","card","cardHeader","cardTitle","subTitle","cardImg","src","alt","cardBody","container","metadata","cardText","apiKey","searchPersonUrl","personUrl","languagesUrl","defaultLanguage","iso_639_1","english_name","defaultReturn","options","hasMore","additional","page","formatResponse","response","status","data","total_pages","results","gender","profile_path","value","info","label","known_for_department","App","Component","constructor","super","searchActors","inputValue","loadedOptions","length","url","axios","get","then","catch","error","handleSearchMovie","actor1","actor2","state","urlActor1","urlActor2","all","spread","actor1Response","actor2Response","actor1ResponseData","actor2ResponseData","tmpState","setState","handleActor1","handleActor2","languages","componentDidMount","render","listFilm","languageObject","l","language","main","loadOptions","defaultOptions","onChange","btnPrimary","type","onClick","footer","footerImg","ReactDOM","document","getElementById"],"mappings":"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","file":"js/main.117f5de808378590ccb6.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer___vNb3J\",\"main\":\"main___3bT5J\",\"footerImg\":\"footerImg___Y_vmP\",\"btnPrimary\":\"btnPrimary___vsWsE\"};","import { RoleForActor, FilmForActorViewModel, Cast, ActorViewModel } from './class';\n\nconst normalizeFilmArray = (roleForActor: RoleForActor): FilmForActorViewModel[] => {\n    let filmForActorViewModelArray: FilmForActorViewModel[] = new Array();\n    let cast: Cast[] = roleForActor.cast;\n    cast.forEach(c => {\n        let filmForActorViewModel: FilmForActorViewModel = new FilmForActorViewModel();\n\n        filmForActorViewModel.populate(c);\n        let actorViewModel = new ActorViewModel();\n        actorViewModel.populateFromCast(c);\n        actorViewModel.name = roleForActor.name;\n        filmForActorViewModel.actor.push(actorViewModel);\n        filmForActorViewModelArray.push(filmForActorViewModel);\n    });\n    return filmForActorViewModelArray;\n};\n\nexport const mergeFilm = (filmFromActor1: RoleForActor, filmFromActor2: RoleForActor) => {\n    console.log({ filmFromActor1 });\n    let filmsForFirstActor: FilmForActorViewModel[] = normalizeFilmArray(filmFromActor1);\n    let filmsForSecondActor: FilmForActorViewModel[] = normalizeFilmArray(filmFromActor2);\n    let filmsInCommon: FilmForActorViewModel[] = new Array();\n    console.log({ filmsForFirstActor });\n    filmsForFirstActor.forEach(film => {\n        let filmForSecondActor = filmsForSecondActor.find(f => f.id === film.id);\n        if (filmForSecondActor) {\n            film.secondary_actor = filmForSecondActor.actor;\n            filmsInCommon.push(film);\n        }\n    });\n    console.log(filmsInCommon);\n    return filmsInCommon;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"col-md-5\":\"col-md-5___IjpGm\",\"colMd5\":\"col-md-5___IjpGm\",\"description\":\"description____t2rJ\",\"cardHeader\":\"cardHeader___3kUH9\",\"metadata\":\"metadata___aMg_U\",\"subTitle\":\"subTitle___2_4pK\",\"cardTitle\":\"cardTitle___2fYch\",\"cardBody\":\"cardBody___31_4G\",\"cardText\":\"cardText___3UALG\",\"card\":\"card___1H-MX\",\"cardImg\":\"cardImg___1AURQ\"};","import { isThisMinute } from 'date-fns';\n\nexport interface FilmInterface {\n    media_type: string;\n    poster_path?: string;\n    backdrop_path?: string;\n    popularity: number;\n    title?: string;\n    name: string;\n    original_language: string;\n    release_date: string;\n    overview: string;\n    id: number;\n    original_title: string;\n}\nexport class Cast implements FilmInterface {\n    media_type: string;\n    adult: boolean;\n    backdrop_path?: string;\n    character: string;\n    credit_id: string;\n    genre_ids: number[];\n    id: number;\n    original_language: string;\n    original_title: string;\n    overview: string;\n    popularity: number;\n    poster_path?: string;\n    release_date: string;\n    title: string;\n    video: boolean;\n    vote_average: number;\n    vote_count: number;\n    name: string;\n    constructor() {}\n}\nexport class Crew implements FilmInterface {\n    media_type: string;\n    adult: string;\n    backdrop_path: string;\n    credit_id: string;\n    department: string;\n    genre_ids: number[];\n    id: number;\n    job: string;\n    original_language: string;\n    original_title: string;\n    overview: string;\n    popularity: number;\n    poster_path: string;\n    release_date: string;\n    title: string;\n    video: boolean;\n    vote_average: number;\n    vote_count: number;\n    name: string;\n    constructor() {}\n}\n\nexport class RoleForActor {\n    cast: Cast[];\n    crew: Crew[];\n    id: number;\n    popularity: number;\n    gender: number;\n    profile_path: string;\n    name: string;\n    constructor() {}\n}\n\nexport class ActorViewModel {\n    character: string;\n    job: string;\n    department: string;\n    name: String;\n    constructor() {}\n    populateFromCast(cast: Cast) {\n        this.character = cast.character;\n        this.job = '';\n        this.department = '';\n        this.name = cast.name;\n    }\n    populateFromCrew(crew: Crew) {\n        this.character = '';\n        this.job = crew.job;\n        this.department = crew.department;\n        this.name = crew.name;\n    }\n}\nexport class FilmForActorViewModel implements FilmInterface {\n    media_type: string;\n    poster_path?: string;\n    backdrop_path?: string;\n    popularity: number;\n    title: string;\n    original_title: string;\n    original_language: string;\n    release_date: string;\n    overview: string;\n    id: number;\n    actor: ActorViewModel[];\n    secondary_actor: ActorViewModel[];\n    name: string;\n    constructor() {}\n    populate(film: FilmInterface) {\n        this.media_type = film.media_type;\n        this.poster_path = film.poster_path;\n        this.backdrop_path = film.backdrop_path;\n        this.popularity = film.popularity;\n        this.title = film.title || film.name;\n        this.original_language = film.original_language;\n        this.release_date = film.release_date;\n        this.id = film.id;\n        this.overview = film.overview;\n        this.actor = new Array();\n        this.secondary_actor = new Array();\n        this.original_title = film.original_title;\n        this.name = film.name;\n    }\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/forbid-prop-types */\n/* eslint-disable camelcase */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './style.scss';\n\nconst FilmCard = props => {\n    const {\n        media_type,\n        poster_path,\n        backdrop_path,\n        popularity,\n        title,\n        original_language,\n        release_date,\n        overview,\n        original_title,\n        id,\n        first_actor,\n        secondary_actor,\n    } = props;\n    const first_actor_role = first_actor.role\n        .filter(x => x.character !== '')\n        .map(x => x.character)\n        .join(',');\n    // const first_actor_job = first_actor.role\n    //     .filter(x => x.character === '')\n    //     .map(x => `${x.job} at ${x.department}`)\n    //     .join(',');\n\n    const secondary_actor_role = secondary_actor.role\n        .filter(x => x.character !== '')\n        .map(x => x.character)\n        .join(',');\n    // const secondary_actor_job = secondary_actor.role\n    //     .filter(x => x.character === '')\n    //     .map(x => `${x.job} at ${x.department}`)\n    //     .join(',');\n    return (\n        <div id={id} className=\"\">\n            <div className={styles.card + ' card'}>\n                <div className={styles.cardHeader + ' card-header'}>\n                    <h1 className={styles.cardTitle + ' card-title'}>\n                        {original_title}\n                        <span className={styles.subTitle}>{title}</span>\n                    </h1>\n                    <img className={styles.cardImg + ' card-img'} src={`https://image.tmdb.org/t/p/w500${backdrop_path}`} alt=\"Backdrop\" />\n                </div>\n                <div className={styles.cardBody + ' card-body'}>\n                    <div className={styles.container}>\n                        <div className=\"row\">\n                            <span className={styles.metadata}>\n                                <i className=\"fa fa-star\" aria-hidden=\"true\"></i>\n                                <p>{popularity}</p>\n                            </span>\n                            <span className={styles.metadata}>{original_language}</span>\n                            <span className={styles.metadata}>{release_date}</span>\n                            <span className={styles.metadata}>{media_type}</span>\n                        </div>\n                    </div>\n                    <p className={styles.cardText}>{overview}</p>\n                    <p>\n                        {first_actor.name} in {first_actor_role}\n                    </p>\n                    <p>\n                        {secondary_actor.name} in {secondary_actor_role}\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default FilmCard;\n\nFilmCard.propTypes = {\n    media_type: PropTypes.string,\n    poster_path: PropTypes.string,\n    popularity: PropTypes.number,\n    title: PropTypes.string,\n    original_title: PropTypes.string,\n    original_language: PropTypes.string,\n    release_date: PropTypes.string,\n    overview: PropTypes.string,\n    id: PropTypes.number,\n    backdrop_path: PropTypes.string,\n    first_actor: PropTypes.object,\n    secondary_actor: PropTypes.object,\n};\n","/* eslint-disable consistent-return */\n/* eslint-disable no-param-reassign */\n/* eslint-disable react/jsx-closing-bracket-location */\nimport React, { Component } from 'react';\nimport { hot } from 'react-hot-loader/root';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport axios from 'axios';\nimport AsyncPaginate from 'react-select-async-paginate';\nimport styles from './style/style.scss';\nimport { mergeFilm } from './utility/function';\nimport FilmCard from './components/filmCard';\n\nconst apiKey = '199df12205e314f03bf242844484204b';\nconst searchPersonUrl = 'https://api.themoviedb.org/3/search/person';\nconst personUrl = 'https://api.themoviedb.org/3/person/';\nconst languagesUrl = 'https://api.themoviedb.org/3/configuration/languages';\n\nconst defaultLanguage = {\n    iso_639_1: 'xx',\n    english_name: 'No Language',\n    name: 'No Language',\n};\n\nconst defaultReturn = {\n    options: [],\n    hasMore: false,\n    additional: {\n        page: 1,\n    },\n};\n\nconst formatResponse = response => {\n    const { status, data } = response;\n    if (status !== 200) return defaultReturn;\n    const hasMore = data.page !== data.total_pages && data.total_pages !== 0;\n    const options = data.results.map(actor => {\n        const { id, popularity, gender, profile_path, name } = actor;\n        return {\n            value: id,\n            info: { id, popularity, gender, profile_path, name },\n            label: `${name} (${actor.known_for_department})`,\n        };\n    });\n    return {\n        options,\n        hasMore,\n        additional: {\n            page: data.page + 1,\n        },\n    };\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            actor1: [],\n            actor2: [],\n            filmsInCommon: [],\n            languages: [],\n        };\n    }\n\n    componentDidMount() {\n        const url = `${languagesUrl}?api_key=${apiKey}`;\n        axios\n            .get(url)\n            .then(response => {\n                const { status, data } = response;\n                if (status !== 200) return [];\n                this.setState({ languages: data });\n            })\n            .catch(function(error) {\n                console.log(error);\n            });\n    }\n\n    searchActors = (inputValue, loadedOptions, { page }) => {\n        if (!inputValue || inputValue.length < 3) return defaultReturn;\n        const url = `${searchPersonUrl}?api_key=${apiKey}&query=${inputValue}&page=${page}`;\n        return axios\n            .get(url)\n            .then(formatResponse)\n            .catch(function(error) {\n                console.log(error);\n                return defaultReturn;\n            });\n    };\n\n    handleSearchMovie = () => {\n        const { actor1, actor2 } = this.state;\n        const urlActor1 = `${personUrl}${actor1.value}/combined_credits?api_key=${apiKey}`;\n        const urlActor2 = `${personUrl}${actor2.value}/combined_credits?api_key=${apiKey}`;\n        axios\n            .all([axios.get(urlActor1), axios.get(urlActor2)])\n            .then(\n                axios.spread((actor1Response, actor2Response) => {\n                    const actor1ResponseData = { ...actor1Response.data, ...actor1.info };\n                    const actor2ResponseData = { ...actor2Response.data, ...actor2.info };\n                    const filmsInCommon = mergeFilm(actor1ResponseData, actor2ResponseData);\n                    const tmpState = { ...this.state };\n                    tmpState.filmsInCommon = filmsInCommon;\n                    this.setState(tmpState);\n                }),\n            )\n            .catch(function(error) {\n                console.log(error);\n            });\n    };\n\n    handleActor1 = value => {\n        const tmpState = { ...this.state };\n        tmpState.actor1 = value;\n        this.setState(tmpState);\n    };\n\n    handleActor2 = value => {\n        const tmpState = { ...this.state };\n        tmpState.actor2 = value;\n        this.setState(tmpState);\n    };\n\n    render() {\n        const { actor1, actor2, filmsInCommon } = this.state;\n        const listFilm = filmsInCommon.map(x => {\n            const { actor, secondary_actor } = x;\n\n            const { languages } = this.state;\n            const languageObject = languages.find(l => l.iso_639_1 === x.original_language) || defaultLanguage;\n            const { name, english_name } = languageObject;\n            const language = name === english_name ? name : `${name} (${english_name})`;\n            return (\n                <FilmCard\n                    key={x.id}\n                    id={x.id}\n                    original_title={x.original_title}\n                    title={x.title}\n                    poster_path={x.poster_path}\n                    popularity={x.popularity}\n                    original_language={language}\n                    release_date={x.release_date}\n                    overview={x.overview}\n                    backdrop_path={x.backdrop_path}\n                    media_type={x.media_type}\n                    first_actor={{ name: actor[0].name, role: actor }}\n                    secondary_actor={{ name: secondary_actor[0].name, role: secondary_actor }}\n                />\n            );\n        });\n        return (\n            <div className=\"container-fluid\">\n                <div className={'main p-3 ' + styles.main}>\n                    <div className=\"row\">\n                        <div className=\"col-sm-12 col-md-6\">\n                            <span>First actor</span>\n                            <AsyncPaginate\n                                loadOptions={this.searchActors}\n                                defaultOptions={false}\n                                value={actor1}\n                                onChange={this.handleActor1}\n                                additional={{\n                                    page: 1,\n                                }}\n                            />\n                        </div>\n                        <div className=\"col-sm-12 col-md-6\">\n                            <span>Second actor</span>\n                            <AsyncPaginate\n                                loadOptions={this.searchActors}\n                                defaultOptions={false}\n                                value={actor2}\n                                onChange={this.handleActor2}\n                                additional={{\n                                    page: 1,\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-12 mt-4 text-center\">\n                            <button className={'btn btn-primary ' + styles.btnPrimary} type=\"button\" onClick={this.handleSearchMovie}>\n                                Cerca film\n                            </button>\n                        </div>\n                    </div>\n                    <div className=\"row d-flex justify-content-around align-self-stretch\">{listFilm}</div>\n                </div>\n                <div className={styles.footer}>\n                    <img\n                        className={styles.footerImg}\n                        alt=\"powered by The movie DB\"\n                        src=\"https://www.themoviedb.org/assets/2/v4/logos/powered-by-rectangle-green-dcada16968ed648d5eb3b36bbcfdd8cdf804f723dcca775c8f2bf4cea025aad6.svg\"\n                    ></img>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default hot(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\n\nReactDOM.render(<App />, document.getElementById('app'));\n"],"sourceRoot":""}